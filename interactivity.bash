# interactivity
#
# Utilities to work with bash while interactive
#
# Author: Dave Eddy <dave@daveeddy.com>
# Credits: http://mywiki.wooledge.org/
# Date: 10/3/2013
# License: MIT

# cd into the dirname of the last argument,
# useful for if you've ever tried cd'ing into
# a file instead of a directory
#
# ~$ cd dev/something/file.txt
# -bash: cd: file.txt: No such file or directory
# ~$ cdir
# ~/dev/something$
alias cdir='cd "${_%/*}"'

# Print arguments as read from the command line after wordsplitting
# http://mywiki.wooledge.org/Arguments
#
# $ args hello "how are" you
# 3 args: <hello> <how are> <you>
args() {
	printf '%d args:' $#
	printf ' <%s>' "$@"
	echo
}

# Print a bash array by name
#
# This uses `eval`, as that is the only way to reference an array
# that has its name stored in a variable while retaining indices (for
# associative and sparse arrays).
# More info on why indirection won't work for this here
# http://mywiki.wooledge.org/BashFAQ/006#Evaluating_indirect.2Freference_variables
#
# Note: the output generated by this function is NOT safe to eval
# by the shell, this is just meant to inspect the contents of array,
# like `var_dump` in PHP, or `console.dir` in JavaScript
#
# $ a=([0]="hello" [1]="how are" [5]="you")
# $ parr a
# (
#         [0]=`hello`
#         [1]=`how are`
#         [5]=`you`
# )
parr() {
	local key value name
	for name in "$@"; do
		echo '('
		eval "
		for key in \"\${!$name[@]}\"; do
			value=\${$name[\$key]}
			echo -e \"\\t[\$key]=\\\`\$value\\\`\"
		done"
		echo ')'
	done
}

complete -A arrayvar parr
